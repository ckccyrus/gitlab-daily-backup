pipeline{
    options {
        disableConcurrentBuilds() // Prevent this jenkins project run in parallel
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20')) //Remove old builds
    }
    agent {
        label 'agent-internal-build'
    }
    tools {
        nodejs 'nodejs' // NodeJs configured in Jenkins -> Global Tools Configuration -> NodeJS section
    }
    parameters {
        string(
            name: 'gitlab_domain',
            defaultValue: 'https://gitlab.xxxx.link/',
            description: 'Required param to run the git backup script'
        )
    }
    environment {
        CMS_HOST = '192.168.1.209:9001'
        WORKSPACE_DIR = 'workspace/'
        ZIP_FILE_PATH = '/zip'
        SOURCE_FILE_PATH = '/source'
    }
    stages {
        stage('Clone:GitBackup'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start cloning git backup project ...'

                    String untrackFolder = "untrack/"
                    String gitFolder = "git-backup/"
                    String gitPath = "https://gitlab.xxxx.link/frontend/git_backup.git";
                    env.GIT_FOLDER_PATH = untrackFolder + gitFolder;
                    env.GIT_PATH = gitPath;

                    echo "======== Params ========="
                    echo "Git Folder Path: $env.GIT_FOLDER_PATH"
                    echo "Git Path: $env.GIT_PATH"
                    echo "======== /Params ========="

                    withCredentials([gitUsernamePassword(credentialsId: 'frontend-LDAP', gitToolName: 'git-tool')]) { //https://www.jenkins.io/blog/2021/07/27/git-credentials-binding-phase-1/
                        //Create game git folder
                        sh("""
                            if [ ! -d $untrackFolder ] ; then
                                mkdir $untrackFolder
                                cd $untrackFolder
                                if [ ! -d $gitFolder ] ; then
                                    mkdir $gitFolder
                                fi
                            fi
                        """)

                        dir("$env.GIT_FOLDER_PATH") { //generated by pipeline snippet generator: [checkout: Check out from version control]
                            checkout(
                                changelog: false, 
                                poll: false, 
                                scm: [
                                    $class: 'GitSCM', 
                                    branches: [[name: "master"]],
                                    extensions: [], 
                                    userRemoteConfigs: [
                                        [credentialsId: 'frontend-LDAP', url: "$env.GIT_PATH"]
                                    ]
                                ]
                            )
                        }
                    }

                    echo 'Finish cloning git backup project ...'
                    echo '==========================='
                }
            }
        }

        stage('Set:Env'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start setting Env ...'

                    Date curDate = new Date();
                    String curMonth = curDate.format('MM');
                    String curYear = curDate.format('YYYY');
                    String curDay = curDate.format('dd');

                    env.CUR_MONTH = curMonth;
                    env.CUR_YEAR = curYear;
                    env.CUR_DAY = curDay;

                    env.CURDATE_DIR = env.CUR_YEAR + '-' + env.CUR_MONTH + '-' + env.CUR_DAY;
                    env.DIST_DIR = env.WORKSPACE_DIR + env.CUR_YEAR + '-' + env.CUR_MONTH + '-' + env.CUR_DAY;

                    echo '=============Environment Variables=============='
                    sh 'printenv'
                    echo '=============/Environment Variables=============='

                    echo 'Finish setting Env ...'
                    echo '==========================='
                }
            }
        }
        stage('Run:CodeBackup'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start running code backup ...'

                    dir("$env.GIT_FOLDER_PATH"){
                        sh "pwd"
                        sh "npm install"

                        withCredentials([usernamePassword(credentialsId: 'frontend-LDAP-api-token', usernameVariable: 'gitUsername', passwordVariable: 'gitToken')]) {
                            sh ('node index.js -- -- GIT_PATH $gitlab_domain -- GIT_USERNAME $gitUsername -- GIT_TOKEN $gitToken -- CURDATE $CURDATE_DIR')
                        }
                    }

                    echo 'Finish running code backup ...'
                    echo '==========================='
                }
            }
        }
        stage('Publish:zipToBackupVolume'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start publishing zip to backup volumes ...'

                    sh "pwd"
                    sh "mkdir -p /Volumes/BackupVolume/$env.CURDATE_DIR/Git"
                    sh "cp -a $env.GIT_FOLDER_PATH/workspace/$env.CURDATE_DIR/zip/. /Volumes/BackupVolume/$env.CURDATE_DIR/Git"

                    echo 'Finish publishing zip to backup volumes ...'
                    echo '==========================='
                }
            }
        }
        stage('Sync:sourceToLocalGit'){
            steps {
                script {
                    echo '==========================='
                    echo 'Start syncing source to local git ...'

                    sh "pwd"
                    sh "mkdir -p /Users/frontend/Git"
                    sh "rsync -av $env.GIT_FOLDER_PATH/workspace/$env.CURDATE_DIR/source/ /Users/frontend/Git/"
                    

                    echo 'Finish syncing source to local git ...'
                    echo '==========================='
                }
            }
        }
    }
}